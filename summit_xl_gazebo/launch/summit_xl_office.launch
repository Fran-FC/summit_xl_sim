<?xml version="1.0"?>
<launch>

	<!-- roslaunch arguments -->
	<arg name="debug" default="false"/>
	<arg name="gui" default="true"/>

	<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find summit_xl_gazebo)/worlds/summit_xl_office.world"/>
		<arg name="debug" value="$(arg debug)" />
		<arg name="gui" value="$(arg gui)" />
		<arg name="paused" value="false"/>
		<arg name="use_sim_time" value="true"/>
		<arg name="headless" value="false"/>
	</include>

	
	<!-- Bug: this global robot_description is needed to load the joint_position_controllers of the ptz camera -->
	<param name="/robot_description"
         command="$(find xacro)/xacro.py '$(find summit_xl_description)/urdf/summit_xl.urdf.xacro' namespace:=/" />


	<!-- Each group defines a summit_xl robot, where group ns must be equal to arg namespace -->
	<group ns="summit_xl">
		<arg name="namespace" value="summit_xl"/>
	  	<arg name="model" value="$(arg namespace)"/>
	  
	  	<!-- Load the URDF into the ROS Parameter Server -->
		<param name="robot_description"
         	command="$(find xacro)/xacro.py '$(find summit_xl_description)/urdf/summit_xl_hq.urdf.xacro' namespace:=$(arg namespace)" />
  
	  	<!-- summit_xl_control launch file -->
	  	<include file="$(find summit_xl_control)/launch/summit_xl_control.launch">
			<arg name="namespace" value="$(arg namespace)"/>
		</include>
  
	  	<!-- summit_xl_robot_control launch file -->
		  <!-- Include this file only if you wish the control to be done by the summit_xl_robot_control node -->
		  <!-- i.e. if the control is not assumed by the libgazebo_ros_skid_steer_drive plugin -->
		  <!-- also you should include it if you want to move the ptz camera with the joystick -->
		<!--
		  <include file="$(find summit_xl_robot_control)/launch/summit_xl_robot_control.launch">
				<arg name="namespace" value="$(arg namespace)"/>
				<arg name="model" value="$(arg model)"/>
			</include>
		-->
	
		<!-- Include this file only if you wish a the control the robot via joystick, it has to be commented if you want to set goals for autonomous navigation -->
		<!-- summit_xl_joy launch file -->
		<!-- for this node to work correctly first you need to succesfully connect the ps3 joystick with:
			sudo su
			rosrun ps3joy sixpair
			rosrun ps3joy ps3joy.py
		-->
	  	<include file="$(find summit_xl_joystick)/launch/summit_xl_joy.launch"/>
	         
		<!-- Call a python script to the run a service call to gazebo_ros to spawn a URDF robot -->
		<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
		args="-urdf -model $(arg model) -param robot_description"/>

		<!-- use static_transform_publisher to define map->odom transform    -->
		<!-- only use if you arenÂ´t using a localization algorithm like amcl -->
		<node pkg="tf" type="static_transform_publisher" name="static_map_broadcaster" args="0 0 0 0 0 0 map $(arg namespace)/odom 100" />
	</group>
	
</launch>
